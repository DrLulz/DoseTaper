/* MIXINS */
@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -o-transition: $args;
    transition: $args;

    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin transition-property($args) {
    -webkit-transition-property: $args;
    -moz-transition-property: $args;
    -o-transition-property: $args;
    transition-property: $args;

    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin transition-cubic-bezier($time) {
    -webkit-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    -moz-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    -o-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    transition: all $time cubic-bezier(0.42, 0, 0.58, 1);

    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin transform($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
}

@mixin transform-origin($args) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -ms-transform-origin: $args;
    -o-transform-origin: $args;
    transform-origin: $args;
}

@mixin animation($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    animation: $args;

    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin animation-duration($args) {
    -webkit-animation-duration: $args;
    -moz-animation-duration: $args;
    animation-duration: $args;

    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin animation-delay($args) {
    -webkit-animation-delay: $args;
    -moz-animation-delay: $args;
    animation-delay: $args;

    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin opacity($opacity) {
    $opacity-ie: $opacity * 100;

    opacity: $opacity;

    filter: alpha(opacity = $opacity-ie);

    //IE8
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin calc($property, $expression) {
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: -moz-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

@mixin rem($property, $values) {
    $px: ();
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto {
            $px: append($px, $value);
            $rem: append($rem, $value);
        }
        @else {
            $unit: unit($value);
            $val: strip-unit($value);

            @if $unit == "px" {
                $px: append($px, $value);
                $rem: append($rem, $val / 10 + rem);
            }
            @if $unit == "rem" {
                $px: append($px, $val * 10 + px);
                $rem: append($rem, $value);
            }
        }
    }
    @if $px == $rem {
        #{$property}: $px;
    }
    @else {
        #{$property}: $px;
        #{$property}: $rem;
    }
}

@mixin font-smoothing {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin arrow_down {
    @-webkit-keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }
    }
    @-moz-keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }
    }
    @keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }
    }
}



@mixin responsiveEl($element, $property, $xs, $sm, $md, $lg) {
    @include media-breakpoint-up(xs) {
        #{$element} {
            #{$property}: $xs;
        }
    }
    @include media-breakpoint-up(sm) {
        #{$element} {
            #{$property}: $sm;
        }
    }
    @include media-breakpoint-up(md) {
        #{$element} {
            #{$property}: $md;
        }
    }
    @include media-breakpoint-up(lg) {
        #{$element} {
            #{$property}: $lg;
        }
    }
}

/* 0, 544, 768, 992, 1200 */
@mixin responsivePropUp($property, $xs, $sm, $md, $lg, $xl) {
    @include media-breakpoint-up(xs) {
        #{$property}: $xs;
    }
    @include media-breakpoint-up(sm) {
        #{$property}: $sm;
    }
    @include media-breakpoint-up(md) {
        #{$property}: $md;
    }
    @include media-breakpoint-up(lg) {
        #{$property}: $lg;
    }
    @include media-breakpoint-up(xl) {
        #{$property}: $xl;
    }
}

/* 0, 544, 768, 992, 1200 */
@mixin responsivePropDn($property, $xs, $sm, $md, $lg, $xl) {
    @include media-breakpoint-down(xs) {
        #{$property}: $xs;
    }
    @include media-breakpoint-down(sm) {
        #{$property}: $sm;
    }
    @include media-breakpoint-down(md) {
        #{$property}: $md;
    }
    @include media-breakpoint-down(lg) {
        #{$property}: $lg;
    }
    @include media-breakpoint-down(xl) {
        #{$property}: $xl;
    }
}

/* No greater than $max, no less than $min */
//@mixin between-widths ($element, $property, $value, $min, $max) {
//    @media (max-width: $max) and (min-width: $min) {
//        #{$element} {
//            #{$property}: $value;
//        }
//    }
//}

@mixin retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2 / 1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
        @content;
    }
}

@mixin print {
    @media print {
        @content;
    }
}

/* Devices
---------------------------------------------------------------------------*/
@mixin mqu($args...) {
    $media-type: "only screen";
    $media-type-key: "media-type";
    $args: keywords($args);
    $expr: "";

    @if map-has-key($args, $media-type-key) {
        $media-type: map-get($args, $media-type-key);
        $args: map-remove($args, $media-type-key);
    }
    @each $key, $value in $args {
        @if $value {
            $expr: "#{$expr} and (#{$key}: #{$value})";
        }
    }

    @media #{$media-type} #{$expr} {
        @content;
    }
}

@mixin device($devices, $orientation: false) {
    @each $device in $devices {
        $map: map-deep-get($device-list, $device);

        @if length($map) == 2 {
            $min: map-get($map, min);
            $max: map-get($map, max);

            @include mqu($min-width: $min, $max-width: $max, $orientation: $orientation) {
                @content;
            }
        }
        @else {
            @if map-has-key($map, min) {
                $min: map-get($map, min);

                @include mqu($min-width: $min) {
                    @content;
                }
            }
            @else if map-has-key($map, max) {
                $max: map-get($map, max);

                @include mqu($max-width: $max) {
                    @content;
                }
            }
        }
    }
}
