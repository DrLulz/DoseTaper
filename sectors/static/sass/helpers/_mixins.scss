/* MIXINS */
@mixin transition ($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -o-transition: $args;
    transition: $args;
    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin transition-property ($args) {
    -webkit-transition-property: $args;
    -moz-transition-property: $args;
    -o-transition-property: $args;
    transition-property: $args;
    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin transition-cubic-bezier ($time) {
    -webkit-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    -moz-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    -o-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin transform ($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
}

@mixin transform-origin ($args) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -ms-transform-origin: $args;
    -o-transform-origin: $args;
    transform-origin: $args;
}

@mixin animation ($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    animation: $args;
    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin animation-duration ($args) {
    -webkit-animation-duration: $args;
    -moz-animation-duration: $args;
    animation-duration: $args;
    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin animation-delay ($args) {
    -webkit-animation-delay: $args;
    -moz-animation-delay: $args;
    animation-delay: $args;
    /* IE9 not supported */
    /* https://modernizr.com */
}

@mixin opacity ($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie);
    //IE8
}

@mixin border-radius ($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin calc($property, $expression) {
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: -moz-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

@mixin font-smoothing {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin arrow_down {
    @-webkit-keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }

    }

    @-moz-keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }

    }

    @keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }

    }

}

@mixin responsive-font-size ($min-font-size, $max-font-size, $min-screen-width, $max-screen-width, $font-size-step:0.1em) {
    font-size: $max-font-size;

    @media all and (max-width:$min-screen-width) {
        font-size: $min-font-size;
    }

    @if $font-size-step <= 0 {
        @warn "parameter to responsive-font-size: font-size-step must be greater than 0";
    }

    @else {
        $min-scale-factor: $min-font-size / $min-screen-width / 1em * 1px;
        $max-scale-factor: $max-font-size / $max-screen-width / 1em * 1px;
        $screen-width: round($max-screen-width);
        $font-size: $max-font-size;

        @while $screen-width >= $min-screen-width {
            $progress: ($screen-width - $min-screen-width) / ($max-screen-width - $min-screen-width);
            $scale-factor: $min-scale-factor + $progress * ($max-scale-factor - $min-scale-factor);
            $font-size: $screen-width * $scale-factor / 1px * 1em;

            @media all and (max-width:$screen-width) {
                font-size: $font-size;
            }

            $screen-width-step: $font-size-step / $scale-factor / 1em * 1px;

            @if $screen-width-step < 1px {
                $screen-width-step: 1px;
            }

            $screen-width: round($screen-width - $screen-width-step);
        }

    }

}

@mixin responsiveEl ($element, $property, $xs, $sm, $md, $lg) {
    @include media-breakpoint-up(xs) {
        #{$element} {
            #{$property}: $xs;
        }
    }
    @include media-breakpoint-up(sm) {
        #{$element} {
            #{$property}: $sm;
        }
    }
    @include media-breakpoint-up(md) {
        #{$element} {
            #{$property}: $md;
        }
    }
    @include media-breakpoint-up(lg) {
        #{$element} {
            #{$property}: $lg;
        }
    }
}

@mixin responsiveProp ($property, $xs, $sm, $md, $lg) {
    @include media-breakpoint-up(xs) {
        #{$property}: $xs;
    }
    @include media-breakpoint-up(sm) {
        #{$property}: $sm;
    }
    @include media-breakpoint-up(md) {
        #{$property}: $md;
    }
    @include media-breakpoint-up(lg) {
        #{$property}: $lg;
    }
}