@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -o-transition: $args;
    transition: $args;
    /* IE9 not supported */
}

@mixin transition--duration($args) {
    -webkit-transition-duration: $args;
    -moz-transition-duration: $args;
    transition-duration: $args;
    /* IE9 not supported */
}

@mixin transition-property($args) {
    -webkit-transition-property: $args;
    -moz-transition-property: $args;
    -o-transition-property: $args;
    transition-property: $args;
    /* IE9 not supported */
}

@mixin transition-cubic-bezier($time) {
    -webkit-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    -moz-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    -o-transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    transition: all $time cubic-bezier(0.42, 0, 0.58, 1);
    /* IE9 not supported */
}

@mixin transform($args) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
}

@mixin transform-origin($args) {
    -webkit-transform-origin: $args;
    -moz-transform-origin: $args;
    -ms-transform-origin: $args;
    -o-transform-origin: $args;
    transform-origin: $args;
}

@mixin animation($args) {
    -webkit-animation: $args;
    -moz-animation: $args;
    animation: $args;
    /* IE9 not supported */
}

@mixin animation-duration($args) {
    -webkit-animation-duration: $args;
    -moz-animation-duration: $args;
    animation-duration: $args;
    /* IE9 not supported */
}

@mixin animation--delay($args) {
    -webkit-animation-delay: $args;
    -moz-animation-delay: $args;
    animation-delay: $args;
    /* IE9 not supported */
}

@mixin animation-timing-function($args) {
    -webkit-animation-timing-function: $args;
    animation-timing-function: $args;
    /* IE9 not supported */ 
}

@mixin appearance--css3($args) {
    -webkit-appearance: $args;
    -moz-appearance: $args;
    -o-appearance: $args;
    appearance: $args;
    /* IE9 not supported */
}

@mixin box-sizing($args) {
    -webkit-box-sizing: $args;
    -moz-box-sizing: $args;
    box-sizing: $args;
    /* IE9 not supported */
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin opacity($opacity) {
    $opacity-ie: $opacity * 100;

    opacity: $opacity;

    filter: alpha(opacity = $opacity-ie);

    //IE8
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin calc($property, $expression) {
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: -moz-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

@mixin font-smoothing {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin arrow_down {
    @-webkit-keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }
    }
    @-moz-keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }
    }
    @keyframes arrow_down {
        0% {
            @include transform(rotate(-45deg) translate(0, 0));
            @include opacity(0);
        }

        50% {
            @include opacity(1);
        }

        100% {
            @include transform(rotate(-45deg) translate(-20px, 20px));
            @include opacity(0);
        }
    }
}




$colors-list: (
    1: ( p: #404d5b, num: #81A2BE, bgn: #e8e8e8, lab: #81A2BE, txt: #696969, bdn: #cbc4c6, bda: #A8A8A8, bdf: #81A2BE),
    2: ( p: #404d5b, num: #DC9656, bgn: #d0d6d6, lab: #DC9656, txt: #696969, bdn: #cbc4c6, bda: #A8A8A8, bdf: #DC9656), 
    3: ( p: #404d5b, num: #8F9D6A, bgn: #f0efee, lab: #8F9D6A, txt: #696969, bdn: #cbc4c6, bda: #A8A8A8, bdf: #8F9D6A),
    4: ( p: #404d5b, num: #B294BB, bgn: #f9f7f6, lab: #B294BB, txt: #696969, bdn: #cbc4c6, bda: #A8A8A8, bdf: #B294BB),
    5: ( p: #ffffff, num: #CC6666, bgn: #6C6C6C, lab: #CC6666, txt: #A09C9C, bdn: #cbc4c6, bda: #A8A8A8, bdf: #CC6666),
    6: ( p: #ffffff, num: #ffdf5f, bgn: #2f3238, lab: #ffdf5f, txt: #b5b5b5, bdn: #cbc4c6, bda: #A8A8A8, bdf: #ffdf5f)
);

@mixin phase-colors() {
    @for $i from 1 through length($colors-list) {

        $map: map-deep-get($colors-list, $i);
        $p:   map-get($map, p);
        $num: map-get($map, num);
        $bgn: map-get($map, bgn);
        $lab: map-get($map, lab);
        $txt: map-get($map, txt);
        $bdn: map-get($map, bdn);
        $bda: map-get($map, bda);
        $bdf: map-get($map, bdf);

        .phase:nth-of-type( #{length($colors-list)}n + #{$i}) {
            background-color: $bgn;
            .phase-label {
                color: $p;}
            .phase-num {
                color: $num;}
            
            label.fl-label {
                color: lighten($lab, 0.5);}

            input.fl-input {
                color: $txt;
                border: 3px solid $bdn;

                &::placeholder {
                    color: $lab;
                }
                &:-moz-placeholder {
                    color: $lab;
                }
                &::-moz-placeholder {
                    color: $lab;
                }
                &:-ms-input-placeholder {
                    color: $lab;
                }
                &::-ms-input-placeholder {
                    color: $lab;
                }
                &::-webkit-input-placeholder {
                    color: $lab;
                }
            }
            .fl-is-active input.fl-input {
                border-color: $bda;
            }
            .fl-has-focus input.fl-input {
                border-color: $bdf;    
            }
        }

    }
}

// inset "text", "type", "embosed" ? 
@mixin inset-type($light-shadow, $dark-shadow) {
  text-shadow: 
    0px 1px 3px rgba(255,255,255,$light-shadow),
    -1px -1px 1px rgba(0,0,0,$dark-shadow);
}